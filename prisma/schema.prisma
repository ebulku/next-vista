generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
    id        String   @id @default(cuid())
    name      String
    email     String   @unique
    password  String
    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")

    @@map(name: "users")
}

model Customer {
    id          String    @id @default(cuid())
    name        String
    email       String?
    phone       String?
    address     String?
    description String?
    imageUrl    String?   @map("image_url")
    invoices    Invoice[]
    orders      Order[]
}

model Invoice {
    id         String        @id @default(cuid())
    customerId String
    amount     Int
    status     InvoiceStatus @default(pending)
    date       DateTime      @default(now()) @map(name: "created_at")

    customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
}

model Revenue {
    month   String @id
    revenue Int
}

model Order {
    id         String      @id @default(cuid())
    title      String
    customerId String?     @map("customer_id")
    amount     Int?
    status     OrderStatus @default(new)
    notes      Note[]
    files      File[]

    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")

    customer Customer? @relation(fields: [customerId], references: [id])
}

model Note {
    id        String   @id @default(cuid())
    body      String
    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")
    order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
    orderId   String   @map("order_id")
}

model File {
    id        String   @id @default(cuid())
    name      String?
    url       String
    type      String   @default("image")
    createdAt DateTime @default(now()) @map(name: "created_at")
    order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
    orderId   String   @map("order_id")
}

enum InvoiceStatus {
    pending
    paid
}

enum OrderStatus {
    new
    production
    shipped
    paid
}

model Seller {
    id        BigInt  @id @default(autoincrement())
    seller_id BigInt  @unique
    name      String
    phone     String?
    address   String?
    url       String?

    createdAt DateTime         @default(now()) @map(name: "created_at")
    updatedAt DateTime         @updatedAt @map(name: "updated_at")
    products  ProductSellers[]
}

model Product {
    id         BigInt  @id @default(autoincrement())
    product_id BigInt  @unique
    name       String
    url        String?
    status_id  Int
    price      String?

    createdAt DateTime         @default(now()) @map(name: "created_at")
    updatedAt DateTime         @updatedAt @map(name: "updated_at")
    sellers   ProductSellers[]
}

model ProductSellers {
    product    Product @relation(fields: [product_id], references: [product_id])
    product_id BigInt
    seller     Seller  @relation(fields: [seller_id], references: [seller_id])
    seller_id  BigInt

    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")

    @@id([product_id, seller_id])
}
